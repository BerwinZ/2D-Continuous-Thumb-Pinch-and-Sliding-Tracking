import numpy as np


def points_distance(point1, point2):
    """Return the distance between point 1 and point2
    
    Arguments:
        point1 {[type]} -- [description]
        point2 {[type]} -- [description]
    
    Returns:
        [type] -- [description]
    """
    if type(point1) != tuple or type(point2) != tuple:
        return None
    
    if point1[0] is None or point1[1] is None or point2[0] is None or point2[1] is None:
        return None

    d = np.sqrt(np.sum(np.square(np.array(point1) - np.array(point2))))
    return d


def scaler(value, old_range, new_range):
    """Project value from [min_old, max_old] to [min_new, max_new]

    Arguments:
        value {float} -- [description]
        min_base_target {list} -- [min_old, min_new]
        max_base_target {list} -- [max_old, max_new]

    Returns:
        value -- [projected value]
    """
    if value is None or all(old_range) is False or all(new_range) is False:
        return None

    min_old, max_old = old_range
    min_new, max_new = new_range
    return (value - min_old) / (max_old - min_old) * (max_new -
                                                      min_new) + min_new

def my_arctan_degrees(x, y):
    """Return the required angle of the slope
    
    Arguments:
        x {[type]} -- [description]
        y {[type]} -- [description]
    
    Returns:
        [type] -- [description]
    """
    if x is None or y is None:
        return None

    if abs(x) < 1e-9:
        if y > 0:
            return 90
        else:
            return -90
    else:
        degree = np.degrees(np.arctan(y / x))
        if x < 0 and y < 0:
            return 180 - degree
        elif x < 0 and y > 0:
            return 180 + degree
        else:
            return degree

def get_circle(p1, p2, p3):
    """Get the center of the circle generated by 3 points
    
    Arguments:
        p1 {[type]} -- [description]
        p2 {[type]} -- [description]
        p3 {[type]} -- [description]
    
    Returns:
        [type] -- [description]
    """
    if p1 is None or p2 is None or p3 is None:
        return None

    a = 2 * (p2[0] - p1[0])
    b = 2 * (p2[1] - p1[1])
    c = p2[0] * p2[0] + p2[1] * p2[1] - p1[0] * p1[0] - p1[1] * p1[1]
    d = 2 * (p3[0] - p2[0])
    e = 2 * (p3[1] - p2[1])
    f = p3[0] * p3[0] + p3[1] * p3[1] - p2[0] * p2[0] - p2[1] * p2[1]
    if b * d - e * a == 0:
        return None

    x = (b * f - e * c) / (b * d - e * a)
    y = (d * c - a * f) / (b * d - e * a)

    center = ((int)(x), (int)(y))

    return center